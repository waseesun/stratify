{
    "openapi": "3.0.0",
    "info": {
        "title": "Stratify API",
        "description": "API documentation for the Stratify project",
        "contact": {
            "email": "support@example.com"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:8000"
        }
    ],
    "paths": {
        "/api/login": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Log in a user",
                "description": "Authenticates a user with email and password, and returns an access token.",
                "operationId": "loginUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john.doe@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "secret123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "description": "Authentication token",
                                            "type": "string"
                                        },
                                        "token_type": {
                                            "type": "string",
                                            "example": "Bearer"
                                        },
                                        "expires_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2024-12-31 23:59:59"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error or incorrect credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "string",
                                            "example": "Credentials are incorrect."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Log out a user",
                "description": "Invalidates the current user's access token, effectively logging them out.",
                "operationId": "logoutUser",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Successfully logged out."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get a list of all categories",
                "description": "Retrieves a list of all categories.",
                "operationId": "getCategoriesList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Category"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Create a new category",
                "description": "Creates a new category. Requires superadmin privileges.",
                "operationId": "createCategory",
                "requestBody": {
                    "description": "Category data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Category created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to create categories (e.g., not a superadmin).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "messages": {
                                            "description": "Array of forbidden messages",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "messages": [
                                        "You are not authorized to perform this action."
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity (Validation Error)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "description": "Validation errors",
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "errors": {
                                        "name": [
                                            "The name field is required."
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/categories/{category}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get a single category by ID",
                "description": "Retrieves a single category by its ID.",
                "operationId": "getCategoryById",
                "parameters": [
                    {
                        "name": "category",
                        "in": "path",
                        "description": "ID of the category to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Categories"
                ],
                "summary": "Delete a category by ID",
                "description": "Deletes a category by its ID. Requires superadmin privileges.",
                "operationId": "deleteCategory",
                "parameters": [
                    {
                        "name": "category",
                        "in": "path",
                        "description": "ID of the category to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Category deleted successfully (No Content)"
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to delete categories (e.g., not a superadmin).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "messages": {
                                            "description": "Array of forbidden messages",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "messages": [
                                        "You are not authorized to perform this action."
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/problems": {
            "post": {
                "tags": [
                    "Problems"
                ],
                "summary": "Register a new problem with associated skills",
                "description": "Creates a new problem entry, including its title, description, budget, timeline, and a list of required skills. The authenticated user must be a 'company' role.",
                "operationId": "registerProblem",
                "requestBody": {
                    "description": "Problem data including associated skills.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "company_id",
                                    "category_id",
                                    "title",
                                    "budget",
                                    "timeline_value",
                                    "timeline_unit",
                                    "skills"
                                ],
                                "properties": {
                                    "company_id": {
                                        "description": "ID of the company user creating the problem.",
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "category_id": {
                                        "description": "ID of the problem's category.",
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "title": {
                                        "type": "string",
                                        "example": "Develop a Mobile E-commerce App"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "We need an iOS and Android e-commerce application with payment gateway integration.",
                                        "nullable": true
                                    },
                                    "budget": {
                                        "description": "Budget for the problem in base currency units.",
                                        "type": "integer",
                                        "example": 25000
                                    },
                                    "timeline_value": {
                                        "description": "Numerical value for the timeline (e.g., 3 for '3 months').",
                                        "type": "integer",
                                        "example": 3
                                    },
                                    "timeline_unit": {
                                        "description": "Unit for the timeline value.",
                                        "type": "string",
                                        "enum": [
                                            "day",
                                            "week",
                                            "month",
                                            "year"
                                        ],
                                        "example": "month"
                                    },
                                    "status": {
                                        "description": "Current status of the problem (defaults to 'open').",
                                        "type": "string",
                                        "enum": [
                                            "open",
                                            "sold",
                                            "closed",
                                            "cancelled"
                                        ],
                                        "example": "open",
                                        "nullable": true
                                    },
                                    "skills": {
                                        "description": "Array of required skills for the problem.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "React Native"
                                        }
                                    }
                                },
                                "type": "object",
                                "example": {
                                    "company_id": 1,
                                    "category_id": 1,
                                    "title": "Develop a Mobile E-commerce App",
                                    "description": "We need an iOS and Android e-commerce application with payment gateway integration.",
                                    "budget": 25000,
                                    "timeline_value": 3,
                                    "timeline_unit": "month",
                                    "skills": [
                                        "React Native",
                                        "Node.js",
                                        "MongoDB",
                                        "UI/UX Design"
                                    ]
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Problem registered successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Problem registered successfully."
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/ProblemWithSkills"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to register a problem (e.g., not a company user).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error: Invalid input for problem or skills.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a paginated list of all users",
                "description": "Retrieves a paginated list of all registered users. Requires admin privileges.",
                "operationId": "getUsersList",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPagination"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to view all users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users/{user}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user details by ID or slug",
                "description": "Retrieves the details of a specific user by their ID or slug. A user can view their own profile, or an admin can view any user's profile. Includes portfolio links if the user is a 'provider'.",
                "operationId": "getUserByIdOrSlug",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID or slug of the user to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        {
                                            "properties": {
                                                "portfolio_links": {
                                                    "description": "List of portfolio links for 'provider' users.",
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/PortfolioLink"
                                                    },
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to view this user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "description": "Deletes a user by their ID or slug. A user can delete their own account, or an admin can delete any user's account.",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID or slug of the user to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: User deleted successfully."
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to delete this user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update an existing user",
                "description": "Updates the details of an existing user. A user can update their own profile, or a super admin can update any user's profile.\n     * Sensitive fields like 'is_admin', 'is_active', and 'role' are ignored/discarded if sent in the request body, and 'password' is handled separately for updates.",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID or slug of the user to update",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User data to update. Can be JSON or Multipart Form Data.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "Updated Name",
                                        "nullable": true
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "Updated Lastname",
                                        "nullable": true
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "updateduser",
                                        "nullable": true
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "789 New Address",
                                        "nullable": true
                                    },
                                    "description": {
                                        "description": "User's description.",
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "image_url": {
                                        "description": "Set to null to remove existing image.",
                                        "type": "string",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "Updated Name",
                                        "nullable": true
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "Updated Lastname",
                                        "nullable": true
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "updateduser",
                                        "nullable": true
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "789 New Address",
                                        "nullable": true
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Updated description.",
                                        "nullable": true
                                    },
                                    "image_url": {
                                        "description": "User's profile image file (e.g., .jpg, .png). Send as empty string for removal.",
                                        "type": "string",
                                        "format": "binary",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "User updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to update this user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error: Invalid input for allowed fields.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": "The field is required."
                                                }
                                            }
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "message": "The given data was invalid.",
                                    "errors": {
                                        "email": [
                                            "The email is already in use."
                                        ],
                                        "username": [
                                            "The username is already taken by another user."
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users/company": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a new company user",
                "description": "Registers a new user with the 'company' role. Sensitive fields like 'is_admin', 'is_active', and 'role' \n     * cannot be set by the client for this endpoint.",
                "operationId": "createCompanyUser",
                "requestBody": {
                    "description": "User registration data. Can be JSON or Multipart Form Data.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "username",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "Jane",
                                        "nullable": true
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "Doe",
                                        "nullable": true
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "jane.doe@example.com"
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "janedoe"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "Password123!"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "Password123!"
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "456 Business Ave",
                                        "nullable": true
                                    },
                                    "description": {
                                        "description": "User's description (for provider roles, if applicable).",
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "image_url": {
                                        "description": "URL to user's profile image.",
                                        "type": "string",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "email",
                                    "username",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "Jane",
                                        "nullable": true
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "Doe",
                                        "nullable": true
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "jane.doe@example.com"
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "janedoe"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "Password123!"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "Password123!"
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "456 Business Ave",
                                        "nullable": true
                                    },
                                    "description": {
                                        "description": "User's description (for provider roles, if applicable).",
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "image_url": {
                                        "description": "User's profile image file (e.g., .jpg, .png).",
                                        "type": "string",
                                        "format": "binary",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Operation completed successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Unauthorized key (e.g., is_admin, is_active, role) provided by client.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error: Invalid input for allowed fields.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": "The field is required."
                                                }
                                            }
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "message": "The given data was invalid.",
                                    "errors": {
                                        "email": [
                                            "The email is already in use."
                                        ],
                                        "password": [
                                            "The password confirmation does not match."
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/provider": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a new provider user",
                "description": "Registers a new user with the 'provider' role. Sensitive fields like 'is_admin', 'is_active', and 'role' \n     * cannot be set by the client for this endpoint.",
                "operationId": "createProviderUser",
                "requestBody": {
                    "description": "User registration data. Can be JSON or Multipart Form Data.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "username",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "Provider",
                                        "nullable": true
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "User",
                                        "nullable": true
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "provider@example.com"
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "provideruser"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "Password123!"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "Password123!"
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "789 Service Rd",
                                        "nullable": true
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Expert in IT services.",
                                        "nullable": true
                                    },
                                    "image_url": {
                                        "type": "string",
                                        "example": "http://example.com/provider.jpg",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "email",
                                    "username",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "Provider",
                                        "nullable": true
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "User",
                                        "nullable": true
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "provider@example.com"
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "provideruser"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "Password123!"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "Password123!"
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "789 Service Rd",
                                        "nullable": true
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Expert in IT services.",
                                        "nullable": true
                                    },
                                    "image_url": {
                                        "description": "User's profile image file (e.g., .jpg, .png).",
                                        "type": "string",
                                        "format": "binary",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Operation completed successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Unauthorized key (e.g., is_admin, is_active, role) provided by client.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error: Invalid input for allowed fields.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": "The field is required."
                                                }
                                            }
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "message": "The given data was invalid.",
                                    "errors": {
                                        "email": [
                                            "The email is already in use."
                                        ],
                                        "password": [
                                            "The password confirmation does not match."
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/admin": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a new admin user",
                "description": "Registers a new user with the 'admin' role and sets 'is_admin' to true. Requires super super admin privileges for the authenticated user. \n     * Sensitive fields like 'is_active' and 'role' ('admin') cannot be set by the client for this endpoint.",
                "operationId": "createAdminUser",
                "requestBody": {
                    "description": "Admin user registration data. Can be JSON or Multipart Form Data.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "username",
                                    "password",
                                    "password_confirmation",
                                    "is_admin",
                                    "role"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "Admin",
                                        "nullable": true
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "User",
                                        "nullable": true
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "admin@example.com"
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "adminuser"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "AdminPass123!"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "AdminPass123!"
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "100 Admin Rd",
                                        "nullable": true
                                    },
                                    "description": {
                                        "description": "User's description.",
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "image_url": {
                                        "description": "URL to user's profile image.",
                                        "type": "string",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "email",
                                    "username",
                                    "password",
                                    "password_confirmation",
                                    "is_admin",
                                    "role"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "Admin",
                                        "nullable": true
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "User",
                                        "nullable": true
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "admin@example.com"
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "adminuser"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "AdminPass123!"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "AdminPass123!"
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "100 Admin Rd",
                                        "nullable": true
                                    },
                                    "description": {
                                        "description": "User's description.",
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "image_url": {
                                        "description": "User's profile image file (e.g., .jpg, .png).",
                                        "type": "string",
                                        "format": "binary",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Operation completed successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Unauthorized key (e.g., is_active, incorrect role) provided, or authenticated user lacks privileges to create an an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error: Invalid input for allowed fields.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": "The field is required."
                                                }
                                            }
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "message": "The given data was invalid.",
                                    "errors": {
                                        "email": [
                                            "The email is already in use."
                                        ],
                                        "password": [
                                            "The password confirmation does not match."
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users/{user}/portfolio-links": {
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update a user's portfolio links",
                "description": "Updates the portfolio links for a specific user. Only the user themselves or a super admin can update these links. The target user must have the 'provider' role.",
                "operationId": "updatePortfolioLinks",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID of the user whose portfolio links are to be updated.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "Array of portfolio links (URLs) to associate with the user. Existing links not in this array will be deleted, and new ones will be added.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "links": {
                                        "description": "An array of valid URLs representing the user's portfolio links.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "url",
                                            "example": "https://example.com/my-portfolio/project1"
                                        }
                                    }
                                },
                                "type": "object",
                                "example": {
                                    "links": [
                                        "https://example.com/portfolio-v1",
                                        "https://another.site/my-work-v2"
                                    ]
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Portfolio links updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Portfolio links updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Portfolio links can only be updated for users with the 'provider' role.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to update portfolio links for this user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error: Invalid input for portfolio links.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": "The links.0 field must be a valid URL."
                                                }
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Category": {
                "title": "Category",
                "description": "Category model",
                "properties": {
                    "id": {
                        "description": "Category ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "description": "Category name",
                        "type": "string",
                        "example": "Electronics"
                    }
                },
                "type": "object",
                "example": {
                    "id": 1,
                    "name": "Electronics"
                }
            },
            "CategoryRequest": {
                "title": "Category Request",
                "description": "Request body for creating or updating a category",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the category",
                        "type": "string",
                        "example": "Books"
                    }
                },
                "type": "object"
            },
            "ProblemWithSkills": {
                "title": "Problem with Skills",
                "description": "Problem model with associated skills",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Problem"
                    },
                    {
                        "properties": {
                            "skillsets": {
                                "description": "List of skills required for the problem.",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ProblemSkillset"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "Problem": {
                "title": "Problem",
                "description": "Problem model",
                "properties": {
                    "id": {
                        "description": "Problem ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "company_id": {
                        "description": "ID of the company that posted the problem",
                        "type": "integer",
                        "format": "int64"
                    },
                    "category_id": {
                        "description": "ID of the problem's category",
                        "type": "integer",
                        "format": "int64"
                    },
                    "title": {
                        "description": "Title of the problem",
                        "type": "string"
                    },
                    "description": {
                        "description": "Full description of the problem",
                        "type": "string",
                        "nullable": true
                    },
                    "budget": {
                        "description": "Budget for the problem",
                        "type": "integer"
                    },
                    "timeline_value": {
                        "description": "Numerical value for the timeline",
                        "type": "integer"
                    },
                    "timeline_unit": {
                        "description": "Unit for the timeline value",
                        "type": "string",
                        "enum": [
                            "day",
                            "week",
                            "month",
                            "year"
                        ]
                    },
                    "status": {
                        "description": "Current status of the problem",
                        "type": "string",
                        "enum": [
                            "open",
                            "sold",
                            "closed",
                            "cancelled"
                        ]
                    },
                    "created_at": {
                        "description": "Timestamp when the problem was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the problem was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "example": {
                    "id": 1,
                    "company_id": 1,
                    "category_id": 1,
                    "title": "Develop a Mobile E-commerce App",
                    "description": "We need an iOS and Android e-commerce application with payment gateway integration.",
                    "budget": 25000,
                    "timeline_value": 3,
                    "timeline_unit": "month",
                    "status": "open",
                    "created_at": "2023-07-25T10:00:00.000000Z",
                    "updated_at": "2023-07-25T10:00:00.000000Z"
                }
            },
            "ProblemSkillset": {
                "title": "ProblemSkillset",
                "description": "Skill required for a problem",
                "properties": {
                    "id": {
                        "description": "Skillset ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "problem_id": {
                        "description": "ID of the associated problem",
                        "type": "integer",
                        "format": "int64"
                    },
                    "skill": {
                        "description": "The required skill (e.g., 'React Native')",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the skill was added",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updated_at": {
                        "description": "Timestamp when the skill was last updated",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "User": {
                "title": "User",
                "description": "User model",
                "properties": {
                    "id": {
                        "description": "User ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "first_name": {
                        "description": "User's first name",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "User's last name",
                        "type": "string"
                    },
                    "email": {
                        "description": "User's email address",
                        "type": "string",
                        "format": "email"
                    },
                    "username": {
                        "description": "User's unique username",
                        "type": "string"
                    },
                    "address": {
                        "description": "User's address",
                        "type": "string",
                        "nullable": true
                    },
                    "role": {
                        "description": "User's role",
                        "type": "string",
                        "enum": [
                            "admin",
                            "company",
                            "provider"
                        ]
                    },
                    "is_admin": {
                        "description": "Indicates if the user has admin privileges",
                        "type": "boolean"
                    },
                    "is_active": {
                        "description": "Indicates if the user account is active",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "User description (e.g., for providers)",
                        "type": "string",
                        "nullable": true
                    },
                    "image_url": {
                        "description": "URL to user's profile image",
                        "type": "string",
                        "nullable": true
                    },
                    "created_at": {
                        "description": "Timestamp of user creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp of last update",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "example": {
                    "id": 1,
                    "first_name": "John",
                    "last_name": "Doe",
                    "email": "john.doe@example.com",
                    "username": "johndoe",
                    "address": "123 Main St",
                    "role": "company",
                    "is_admin": false,
                    "is_active": true,
                    "description": null,
                    "image_url": null,
                    "created_at": "2023-01-01T12:00:00.000000Z",
                    "updated_at": "2023-01-01T12:00:00.000000Z"
                }
            },
            "UserPagination": {
                "title": "User Pagination",
                "description": "Paginated list of users",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/User"
                        }
                    },
                    "links": {
                        "description": "Pagination links",
                        "type": "object"
                    },
                    "meta": {
                        "description": "Pagination meta information",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PortfolioLink": {
                "title": "PortfolioLink",
                "description": "Portfolio link model",
                "properties": {
                    "id": {
                        "description": "ID of the portfolio link",
                        "type": "integer",
                        "format": "int64"
                    },
                    "provider_id": {
                        "description": "ID of the user (provider) who owns this link",
                        "type": "integer",
                        "format": "int64"
                    },
                    "link": {
                        "description": "The URL of the portfolio link",
                        "type": "string",
                        "format": "url"
                    },
                    "created_at": {
                        "description": "Timestamp when the portfolio link was created",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updated_at": {
                        "description": "Timestamp when the portfolio link was last updated",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "ErrorResponse": {
                "title": "Error Response",
                "description": "Standard error response format for generic errors (e.g., 401, 403, 404, 500)",
                "properties": {
                    "errors": {
                        "description": "Error message",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "errors": "Something went wrong."
                }
            }
        },
        "securitySchemes": {
            "sanctum": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Users",
            "description": "API Endpoints for User Management"
        },
        {
            "name": "Categories",
            "description": "Categories"
        },
        {
            "name": "Problems",
            "description": "Problems"
        }
    ]
}